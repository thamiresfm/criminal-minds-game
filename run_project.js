#!/usr/bin/env node

// ========================================
// CRIMINAL MINDS GAME - SCRIPT DE EXECU√á√ÉO AUTOMATIZADA (Node.js)
// ========================================

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// Cores ANSI
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    purple: '\x1b[35m',
    cyan: '\x1b[36m'
};

// Fun√ß√µes de logging
const log = {
    info: (msg) => console.log(`${colors.blue}[INFO]${colors.reset} ${msg}`),
    success: (msg) => console.log(`${colors.green}[SUCCESS]${colors.reset} ${msg}`),
    warning: (msg) => console.log(`${colors.yellow}[WARNING]${colors.reset} ${msg}`),
    error: (msg) => console.log(`${colors.red}[ERROR]${colors.reset} ${msg}`),
    header: () => console.log(`${colors.purple}
üïµÔ∏è‚Äç‚ôÇÔ∏è ====================================
   CRIMINAL MINDS GAME
   Script de Execu√ß√£o Automatizada
   ====================================
${colors.reset}`)
};

// Fun√ß√£o para executar comando e retornar promise
function execCommand(command) {
    return new Promise((resolve, reject) => {
        exec(command, (error, stdout, stderr) => {
            if (error) {
                reject({ error, stderr });
            } else {
                resolve(stdout);
            }
        });
    });
}

// Fun√ß√£o para verificar se comando existe
async function commandExists(command) {
    try {
        const checkCmd = process.platform === 'win32' ? `where ${command}` : `which ${command}`;
        await execCommand(checkCmd);
        return true;
    } catch {
        return false;
    }
}

// Fun√ß√£o para matar processos na porta 3000
async function killExistingProcesses() {
    log.info('Verificando processos existentes...');
    
    try {
        const killCmd = process.platform === 'win32' 
            ? 'netstat -ano | findstr :3000 && taskkill /f /pid'
            : 'lsof -ti:3000 | xargs kill -9';
            
        await execCommand(killCmd);
        log.success('Processos existentes finalizados!');
    } catch {
        log.info('Nenhum processo existente encontrado na porta 3000.');
    }
}

// Fun√ß√£o principal
async function main() {
    try {
        console.clear();
        log.header();
        
        // 1. Verificar Node.js e npm
        log.info(`Diret√≥rio atual: ${process.cwd()}`);
        
        if (!(await commandExists('node'))) {
            log.error('Node.js n√£o est√° instalado!');
            process.exit(1);
        }
        
        if (!(await commandExists('npm'))) {
            log.error('npm n√£o est√° instalado!');
            process.exit(1);
        }
        
        const nodeVersion = await execCommand('node --version');
        const npmVersion = await execCommand('npm --version');
        log.success(`Node.js ${nodeVersion.trim()} e npm ${npmVersion.trim()} encontrados!`);
        
        // 2. Verificar diret√≥rio do projeto
        const projectDir = path.join(process.cwd(), 'criminal-minds-game');
        if (!fs.existsSync(projectDir)) {
            log.error("Diret√≥rio 'criminal-minds-game' n√£o encontrado!");
            log.info('Certifique-se de estar no diret√≥rio correto.');
            process.exit(1);
        }
        
        log.info('Entrando no diret√≥rio do projeto...');
        process.chdir(projectDir);
        
        // 3. Verificar package.json
        if (!fs.existsSync('package.json')) {
            log.error('package.json n√£o encontrado!');
            process.exit(1);
        }
        
        // 4. Limpar processos existentes
        await killExistingProcesses();
        
        // 5. Verificar e instalar depend√™ncias
        if (!fs.existsSync('node_modules')) {
            log.warning('node_modules n√£o encontrado. Instalando depend√™ncias...');
            await execCommand('npm install');
            log.success('Depend√™ncias instaladas!');
        } else {
            log.success('node_modules encontrado!');
        }
        
        // 6. Limpar cache do Next.js
        if (fs.existsSync('.next')) {
            log.info('Limpando cache do Next.js...');
            fs.rmSync('.next', { recursive: true, force: true });
            log.success('Cache limpo!');
        }
        
        // 7. Mostrar informa√ß√µes do projeto
        console.log(`${colors.cyan}
üìä INFORMA√á√ïES DO PROJETO:
========================
üìÅ Diret√≥rio: ${process.cwd()}
üéØ Projeto: Criminal Minds Game
üöÄ Comando: npm run dev
üåê URL: http://localhost:3000
‚è∞ Hor√°rio: ${new Date().toLocaleString()}

üéÆ RECURSOS IMPLEMENTADOS:
‚Ä¢ Sistema de Autentica√ß√£o ‚úÖ
‚Ä¢ Lobby e Sistema de Pesquisa ‚úÖ
‚Ä¢ Mapa de Investiga√ß√£o Interativo ‚úÖ
‚Ä¢ Sistema de Chat em Tempo Real ‚úÖ
‚Ä¢ An√°lise de Evid√™ncias Din√¢mica ‚úÖ
‚Ä¢ Sistema de Configura√ß√µes ‚úÖ
‚Ä¢ Sistema de Notifica√ß√µes ‚úÖ
‚Ä¢ L√≥gica de Jogo Din√¢mico ‚úÖ (NEW!)

${colors.reset}`);
        
        // 8. Iniciar servidor
        log.info('Iniciando servidor de desenvolvimento...');
        log.success('Servidor ser√° executado em: http://localhost:3000');
        log.warning('Para parar o servidor, pressione Ctrl+C');
        
        console.log(`${colors.green}
üöÄ INICIANDO CRIMINAL MINDS GAME...
${colors.reset}`);
        
        // Spawn npm run dev com output em tempo real
        const devProcess = spawn('npm', ['run', 'dev'], {
            stdio: 'inherit',
            shell: true
        });
        
        // Handle cleanup on exit
        process.on('SIGINT', () => {
            console.log(`\n${colors.yellow}üõë Interrompido pelo usu√°rio...${colors.reset}`);
            devProcess.kill('SIGINT');
            log.success('Criminal Minds Game foi parado com sucesso!');
            process.exit(0);
        });
        
        devProcess.on('error', (error) => {
            log.error(`Erro ao executar npm run dev: ${error.message}`);
            process.exit(1);
        });
        
        devProcess.on('close', (code) => {
            if (code !== 0) {
                log.error(`npm run dev finalizou com c√≥digo ${code}`);
                process.exit(code);
            }
        });
        
    } catch (error) {
        log.error(`Erro: ${error.message}`);
        if (error.stderr) {
            console.error(error.stderr);
        }
        process.exit(1);
    }
}

// Executar fun√ß√£o principal
if (require.main === module) {
    main();
}

module.exports = { main }; 