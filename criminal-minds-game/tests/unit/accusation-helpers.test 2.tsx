import { render, screen } from '@testing-library/react'

/**
 * ISTQB CTAL-TAE - Testes Unit√°rios para Fun√ß√µes Auxiliares
 * 
 * Cap√≠tulo 5 (Implementa√ß√£o): Testes isolados de fun√ß√µes utilit√°rias
 * Cap√≠tulo 8 (Qualidade): Cobertura de c√≥digo e valida√ß√£o de edge cases
 */

// Mock das fun√ß√µes auxiliares extra√≠das do componente principal
const getSuspicionLevelColor = (level: string) => {
  switch (level) {
    case 'critical': return 'border-red-500 bg-red-50'
    case 'high': return 'border-orange-500 bg-orange-50'
    case 'medium': return 'border-yellow-500 bg-yellow-50'
    case 'low': return 'border-green-500 bg-green-50'
    default: return 'border-gray-300 bg-gray-50'
  }
}

const getSuspicionLevelIcon = (level: string) => {
  switch (level) {
    case 'critical': return 'üî•'
    case 'high': return '‚ö†Ô∏è'
    case 'medium': return 'üü°'
    case 'low': return 'üü¢'
    default: return '‚ùì'
  }
}

const validateAccusationData = (selectedSuspect: string, reasoning: string, confidence: number) => {
  const errors: string[] = []
  
  if (!selectedSuspect) {
    errors.push('Suspeito deve ser selecionado')
  }
  
  if (confidence < 0 || confidence > 100) {
    errors.push('N√≠vel de confian√ßa deve estar entre 0 e 100')
  }
  
  if (reasoning.length > 1000) {
    errors.push('Justificativa n√£o pode exceder 1000 caracteres')
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}

describe('Fun√ß√µes Auxiliares da Acusa√ß√£o', () => {
  /**
   * Cap√≠tulo 5 (Implementa√ß√£o): Teste de fun√ß√µes puras
   */
  describe('getSuspicionLevelColor', () => {
    test('deve retornar classe CSS correta para n√≠vel cr√≠tico', () => {
      const result = getSuspicionLevelColor('critical')
      expect(result).toBe('border-red-500 bg-red-50')
    })

    test('deve retornar classe CSS correta para n√≠vel alto', () => {
      const result = getSuspicionLevelColor('high')
      expect(result).toBe('border-orange-500 bg-orange-50')
    })

    test('deve retornar classe CSS correta para n√≠vel m√©dio', () => {
      const result = getSuspicionLevelColor('medium')
      expect(result).toBe('border-yellow-500 bg-yellow-50')
    })

    test('deve retornar classe CSS correta para n√≠vel baixo', () => {
      const result = getSuspicionLevelColor('low')
      expect(result).toBe('border-green-500 bg-green-50')
    })

    test('deve retornar classe CSS padr√£o para n√≠vel inv√°lido', () => {
      const result = getSuspicionLevelColor('invalid')
      expect(result).toBe('border-gray-300 bg-gray-50')
    })

    test('deve lidar com string vazia', () => {
      const result = getSuspicionLevelColor('')
      expect(result).toBe('border-gray-300 bg-gray-50')
    })

    test('deve lidar com valor null/undefined', () => {
      const result = getSuspicionLevelColor(null as any)
      expect(result).toBe('border-gray-300 bg-gray-50')
    })
  })

  /**
   * Cap√≠tulo 7 (Manuten√ß√£o): Teste de robustez de √≠cones
   */
  describe('getSuspicionLevelIcon', () => {
    test('deve retornar √≠cone correto para cada n√≠vel de suspeita', () => {
      expect(getSuspicionLevelIcon('critical')).toBe('üî•')
      expect(getSuspicionLevelIcon('high')).toBe('‚ö†Ô∏è')
      expect(getSuspicionLevelIcon('medium')).toBe('üü°')
      expect(getSuspicionLevelIcon('low')).toBe('üü¢')
    })

    test('deve retornar √≠cone padr√£o para n√≠vel desconhecido', () => {
      expect(getSuspicionLevelIcon('unknown')).toBe('‚ùì')
      expect(getSuspicionLevelIcon('')).toBe('‚ùì')
      expect(getSuspicionLevelIcon(null as any)).toBe('‚ùì')
    })
  })

  /**
   * Cap√≠tulo 8 (Qualidade): Valida√ß√£o de dados de entrada
   */
  describe('validateAccusationData', () => {
    test('deve validar dados corretos', () => {
      const result = validateAccusationData('produtor', 'Justificativa v√°lida', 75)
      
      expect(result.isValid).toBe(true)
      expect(result.errors).toHaveLength(0)
    })

    test('deve rejeitar suspeito n√£o selecionado', () => {
      const result = validateAccusationData('', 'Justificativa', 50)
      
      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('Suspeito deve ser selecionado')
    })

    test('deve rejeitar n√≠vel de confian√ßa inv√°lido - valor negativo', () => {
      const result = validateAccusationData('produtor', 'Justificativa', -10)
      
      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('N√≠vel de confian√ßa deve estar entre 0 e 100')
    })

    test('deve rejeitar n√≠vel de confian√ßa inv√°lido - valor acima de 100', () => {
      const result = validateAccusationData('produtor', 'Justificativa', 150)
      
      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('N√≠vel de confian√ßa deve estar entre 0 e 100')
    })

    test('deve aceitar n√≠vel de confian√ßa nos limites (0 e 100)', () => {
      const result1 = validateAccusationData('produtor', 'Justificativa', 0)
      const result2 = validateAccusationData('produtor', 'Justificativa', 100)
      
      expect(result1.isValid).toBe(true)
      expect(result2.isValid).toBe(true)
    })

    test('deve rejeitar justificativa muito longa', () => {
      const longReasoning = 'a'.repeat(1001)
      const result = validateAccusationData('produtor', longReasoning, 50)
      
      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('Justificativa n√£o pode exceder 1000 caracteres')
    })

    test('deve aceitar justificativa no limite de 1000 caracteres', () => {
      const maxReasoning = 'a'.repeat(1000)
      const result = validateAccusationData('produtor', maxReasoning, 50)
      
      expect(result.isValid).toBe(true)
    })

    test('deve aceitar justificativa vazia (opcional)', () => {
      const result = validateAccusationData('produtor', '', 50)
      
      expect(result.isValid).toBe(true)
    })

    test('deve acumular m√∫ltiplos erros', () => {
      const result = validateAccusationData('', 'a'.repeat(1001), -5)
      
      expect(result.isValid).toBe(false)
      expect(result.errors).toHaveLength(3)
      expect(result.errors).toContain('Suspeito deve ser selecionado')
      expect(result.errors).toContain('Justificativa n√£o pode exceder 1000 caracteres')
      expect(result.errors).toContain('N√≠vel de confian√ßa deve estar entre 0 e 100')
    })
  })
})

/**
 * ISTQB CTAL-TAE - Testes de Performance e Limites
 * 
 * Cap√≠tulo 8 (Qualidade): M√©tricas de performance
 */
describe('Performance e Limites', () => {
  test('fun√ß√£o de valida√ß√£o deve executar rapidamente com dados grandes', () => {
    const start = performance.now()
    
    // Executar valida√ß√£o 1000 vezes
    for (let i = 0; i < 1000; i++) {
      validateAccusationData('produtor', 'Justificativa teste', 50)
    }
    
    const end = performance.now()
    const duration = end - start
    
    // Deve executar em menos de 300ms (ajustado para ser mais flex√≠vel)
    expect(duration).toBeLessThan(300)
  })

  test('fun√ß√£o de cor deve ser determin√≠stica', () => {
    const results = []
    
    // Executar 100 vezes com o mesmo input
    for (let i = 0; i < 100; i++) {
      results.push(getSuspicionLevelColor('critical'))
    }
    
    // Todos os resultados devem ser id√™nticos
    const uniqueResults = new Set(results)
    expect(uniqueResults.size).toBe(1)
    expect(results[0]).toBe('border-red-500 bg-red-50')
  })
})

/**
 * ISTQB CTAL-TAE - Testes de Seguran√ßa
 * 
 * Cap√≠tulo 8 (Qualidade): Valida√ß√£o de seguran√ßa de dados
 */
describe('Seguran√ßa e Sanitiza√ß√£o', () => {
  test('deve lidar com tentativas de XSS na justificativa', () => {
    const maliciousInput = '<script>alert("xss")</script>'
    const result = validateAccusationData('produtor', maliciousInput, 50)
    
    // Valida√ß√£o deve aceitar (sanitiza√ß√£o deve ser feita no frontend)
    expect(result.isValid).toBe(true)
    
    // Mas o input deve ser preservado para poss√≠vel sanitiza√ß√£o posterior
    expect(maliciousInput).toContain('<script>')
  })

  test('deve lidar com caracteres especiais na justificativa', () => {
    const specialChars = '!@#$%^&*()_+-=[]{}|;:,.<>?'
    const result = validateAccusationData('produtor', specialChars, 50)
    
    expect(result.isValid).toBe(true)
  })

  test('deve lidar com emojis na justificativa', () => {
    const emojiText = 'üö® Acusa√ß√£o baseada em evid√™ncias üîç'
    const result = validateAccusationData('produtor', emojiText, 50)
    
    expect(result.isValid).toBe(true)
  })
}) 