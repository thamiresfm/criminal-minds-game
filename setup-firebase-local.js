#!/usr/bin/env node

// ========================================
// SETUP FIREBASE LOCAL
// Script para configurar Firebase localmente
// ========================================

const fs = require('fs');
const path = require('path');

console.log('üî• FIREBASE LOCAL SETUP - Criminal Minds Game\n');

// Verificar se est√° em ambiente local
const isLocal = process.env.NODE_ENV !== 'production';

if (!isLocal) {
    console.log('‚ö†Ô∏è Este script √© apenas para desenvolvimento local.');
    console.log('Em produ√ß√£o, use a vari√°vel secreta DADOS_FIREBASE do GitHub.\n');
    process.exit(0);
}

// Fun√ß√£o para criar configura√ß√£o local
function createLocalConfig() {
    console.log('üìù Criando configura√ß√£o local para desenvolvimento...\n');
    
    // Template de configura√ß√£o local
    const localConfig = {
        "apiKey": "AIzaSyDEMO_LOCAL_KEY_DESENVOLVIMENTO",
        "authDomain": "criminal-minds-local.firebaseapp.com",
        "projectId": "criminal-minds-local",
        "storageBucket": "criminal-minds-local.appspot.com",
        "messagingSenderId": "123456789012",
        "appId": "1:123456789012:web:localdev"
    };
    
    // Criar arquivo de configura√ß√£o injetada
    const configScript = `// Configura√ß√£o Firebase para desenvolvimento local
window.FIREBASE_CONFIG = ${JSON.stringify(localConfig, null, 2)};
console.log('‚ö†Ô∏è Usando configura√ß√£o Firebase LOCAL para desenvolvimento');
console.log('Para produ√ß√£o, configure DADOS_FIREBASE no GitHub Actions');
`;
    
    try {
        fs.writeFileSync('firebase-config-injected.js', configScript);
        console.log('‚úÖ Arquivo firebase-config-injected.js criado com sucesso!');
        console.log('üìù Configura√ß√£o local injetada para desenvolvimento.\n');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao criar arquivo de configura√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para adicionar script aos arquivos HTML
function updateHtmlFiles() {
    console.log('üìù Atualizando arquivos HTML para desenvolvimento local...\n');
    
    const htmlFiles = [
        'login.html',
        'register.html', 
        'lobby.html',
        'investigation.html',
        'investigation-cards.html'
    ];
    
    let updated = 0;
    
    htmlFiles.forEach(filename => {
        if (fs.existsSync(filename)) {
            try {
                let content = fs.readFileSync(filename, 'utf8');
                
                // Verificar se j√° tem o script
                if (!content.includes('firebase-config-injected.js')) {
                    // Adicionar antes do </head>
                    content = content.replace(
                        '</head>',
                        '    <script src="firebase-config-injected.js"></script>\n</head>'
                    );
                    
                    fs.writeFileSync(filename, content);
                    console.log(`‚úÖ Script adicionado a ${filename}`);
                    updated++;
                } else {
                    console.log(`‚ö†Ô∏è Script j√° existe em ${filename}`);
                }
            } catch (error) {
                console.error(`‚ùå Erro ao atualizar ${filename}:`, error);
            }
        } else {
            console.log(`‚ö†Ô∏è Arquivo ${filename} n√£o encontrado`);
        }
    });
    
    console.log(`\nüìä ${updated} arquivos atualizados com script Firebase.`);
    return updated > 0;
}

// Fun√ß√£o para criar .gitignore se necess√°rio
function updateGitignore() {
    console.log('\nüìù Verificando .gitignore...');
    
    const gitignoreEntries = [
        'firebase-config-injected.js',
        'node_modules/',
        '*.log',
        '.env',
        '.env.local'
    ];
    
    let gitignoreContent = '';
    
    if (fs.existsSync('.gitignore')) {
        gitignoreContent = fs.readFileSync('.gitignore', 'utf8');
    }
    
    let needsUpdate = false;
    gitignoreEntries.forEach(entry => {
        if (!gitignoreContent.includes(entry)) {
            gitignoreContent += `\n${entry}`;
            needsUpdate = true;
        }
    });
    
    if (needsUpdate) {
        fs.writeFileSync('.gitignore', gitignoreContent);
        console.log('‚úÖ .gitignore atualizado com entradas Firebase');
    } else {
        console.log('‚ö†Ô∏è .gitignore j√° est√° atualizado');
    }
}

// Fun√ß√£o para mostrar pr√≥ximos passos
function showNextSteps() {
    console.log('\nüéØ PR√ìXIMOS PASSOS PARA DESENVOLVIMENTO LOCAL:\n');
    
    console.log('1Ô∏è‚É£ CONFIGURAR PROJETO FIREBASE:');
    console.log('   ‚Ä¢ Acesse: https://console.firebase.google.com/');
    console.log('   ‚Ä¢ Crie um novo projeto');
    console.log('   ‚Ä¢ Ative Authentication (Email/Password)');
    console.log('   ‚Ä¢ Ative Firestore Database');
    console.log('   ‚Ä¢ Copie a configura√ß√£o do projeto\n');
    
    console.log('2Ô∏è‚É£ ATUALIZAR CONFIGURA√á√ÉO LOCAL:');
    console.log('   ‚Ä¢ Edite firebase-config-injected.js');
    console.log('   ‚Ä¢ Substitua pelos dados reais do seu projeto Firebase');
    console.log('   ‚Ä¢ Mantenha este arquivo local (n√£o commitar)\n');
    
    console.log('3Ô∏è‚É£ CONFIGURAR GITHUB SECRETS:');
    console.log('   ‚Ä¢ V√° para: GitHub ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions');
    console.log('   ‚Ä¢ Crie nova vari√°vel: DADOS_FIREBASE');
    console.log('   ‚Ä¢ Cole a configura√ß√£o JSON do Firebase');
    console.log('   ‚Ä¢ Exemplo: {"apiKey":"...","authDomain":"...","projectId":"..."}\n');
    
    console.log('4Ô∏è‚É£ TESTAR LOCALMENTE:');
    console.log('   ‚Ä¢ Serve os arquivos: npx serve . ou python -m http.server');
    console.log('   ‚Ä¢ Acesse: http://localhost:3000 ou http://localhost:8000');
    console.log('   ‚Ä¢ Teste cadastro e login\n');
    
    console.log('5Ô∏è‚É£ DEPLOY AUTOM√ÅTICO:');
    console.log('   ‚Ä¢ Commit e push para gh-pages');
    console.log('   ‚Ä¢ GitHub Actions far√° deploy autom√°tico');
    console.log('   ‚Ä¢ Usar√° a vari√°vel secreta DADOS_FIREBASE\n');
    
    console.log('üîó DOCUMENTA√á√ÉO COMPLETA:');
    console.log('   ‚Ä¢ Consulte FIREBASE-SETUP.md para detalhes');
    console.log('   ‚Ä¢ Guia passo a passo de configura√ß√£o\n');
}

// Executar setup
function main() {
    try {
        console.log('üöÄ Iniciando setup Firebase para desenvolvimento local...\n');
        
        // 1. Criar configura√ß√£o local
        const configCreated = createLocalConfig();
        
        // 2. Atualizar arquivos HTML
        const htmlUpdated = updateHtmlFiles();
        
        // 3. Atualizar .gitignore
        updateGitignore();
        
        // 4. Mostrar pr√≥ximos passos
        showNextSteps();
        
        if (configCreated) {
            console.log('‚úÖ SETUP CONCLU√çDO COM SUCESSO!\n');
            console.log('üî• Firebase configurado para desenvolvimento local.');
            console.log('üìù Configure os dados reais do Firebase para funcionar completamente.\n');
        } else {
            console.log('‚ùå Setup incompleto. Verifique os erros acima.\n');
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante o setup:', error);
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    createLocalConfig,
    updateHtmlFiles,
    updateGitignore
};