#!/usr/bin/env node

/**
 * Script de Teste Automatizado - Corre√ß√µes de Texto e Progresso
 * Criminal Minds Game
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Iniciando testes automatizados...\n');

// Fun√ß√£o para verificar se um arquivo existe
function fileExists(filePath) {
    return fs.existsSync(filePath);
}

// Fun√ß√£o para verificar conte√∫do de um arquivo
function checkFileContent(filePath, searchText) {
    if (!fileExists(filePath)) {
        return { exists: false, found: false };
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    const found = content.includes(searchText);
    
    return { exists: true, found };
}

// Fun√ß√£o para verificar m√∫ltiplas ocorr√™ncias
function checkMultipleOccurrences(filePath, searchText) {
    if (!fileExists(filePath)) {
        return { exists: false, count: 0 };
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    const regex = new RegExp(searchText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
    const matches = content.match(regex);
    const count = matches ? matches.length : 0;
    
    return { exists: true, count };
}

// Fun√ß√£o para testar corre√ß√µes
function runTests() {
    console.log('üìã Executando testes...\n');
    
    let passedTests = 0;
    let totalTests = 0;
    
    // Teste 1: Verificar se o arquivo principal existe
    totalTests++;
    console.log('üîç Teste 1: Verificando arquivo principal...');
    if (fileExists('investigation-cards.html')) {
        console.log('‚úÖ investigation-cards.html encontrado');
        passedTests++;
    } else {
        console.log('‚ùå investigation-cards.html n√£o encontrado');
    }
    
    // Teste 2: Verificar se o texto est√° centralizado
    totalTests++;
    console.log('\nüîç Teste 2: Verificando centraliza√ß√£o do texto...');
    const textAlignmentCheck = checkMultipleOccurrences('investigation-cards.html', 'text-align: center');
    if (textAlignmentCheck.exists && textAlignmentCheck.count >= 2) {
        console.log(`‚úÖ Texto centralizado encontrado (${textAlignmentCheck.count} ocorr√™ncias)`);
        passedTests++;
    } else {
        console.log('‚ùå Texto centralizado n√£o encontrado ou insuficiente');
    }
    
    // Teste 3: Verificar se a mensagem "Todas as cartas foram jogadas" est√° correta
    totalTests++;
    console.log('\nüîç Teste 3: Verificando mensagem de conclus√£o...');
    const messageCheck = checkMultipleOccurrences('investigation-cards.html', 'Todas as cartas foram jogadas');
    if (messageCheck.exists && messageCheck.count >= 2) {
        console.log(`‚úÖ Mensagem encontrada (${messageCheck.count} ocorr√™ncias)`);
        passedTests++;
    } else {
        console.log('‚ùå Mensagem n√£o encontrada ou insuficiente');
    }
    
    // Teste 4: Verificar se a barra de progresso usa o total correto
    totalTests++;
    console.log('\nüîç Teste 4: Verificando c√°lculo da barra de progresso...');
    const progressCheck = checkFileContent('investigation-cards.html', 'difficultySettings[currentDifficulty].cards');
    if (progressCheck.found) {
        console.log('‚úÖ C√°lculo da barra de progresso corrigido');
        passedTests++;
    } else {
        console.log('‚ùå C√°lculo da barra de progresso n√£o corrigido');
    }
    
    // Teste 5: Verificar se o grid-column est√° correto
    totalTests++;
    console.log('\nüîç Teste 5: Verificando layout do grid...');
    const gridCheck = checkFileContent('investigation-cards.html', 'grid-column: 1 / -1');
    if (gridCheck.found) {
        console.log('‚úÖ Layout do grid corrigido');
        passedTests++;
    } else {
        console.log('‚ùå Layout do grid n√£o corrigido');
    }
    
    // Teste 6: Verificar se o arquivo de teste existe
    totalTests++;
    console.log('\nüîç Teste 6: Verificando arquivo de teste...');
    if (fileExists('test-text-progress-fix.html')) {
        console.log('‚úÖ test-text-progress-fix.html encontrado');
        passedTests++;
    } else {
        console.log('‚ùå test-text-progress-fix.html n√£o encontrado');
    }
    
    // Teste 7: Verificar se a documenta√ß√£o existe
    totalTests++;
    console.log('\nüîç Teste 7: Verificando documenta√ß√£o...');
    const docsExist = fileExists('LOGICA_EVIDENCIAS.md') && fileExists('LOGICA_COMBO_STREAK.md');
    if (docsExist) {
        console.log('‚úÖ Documenta√ß√£o encontrada');
        passedTests++;
    } else {
        console.log('‚ùå Documenta√ß√£o n√£o encontrada');
    }
    
    // Teste 8: Verificar se o limite de cartas est√° implementado
    totalTests++;
    console.log('\nüîç Teste 8: Verificando limite de cartas...');
    const limitCheck = checkFileContent('investigation-cards.html', 'cardsPlayed >= maxCardsForLevel');
    if (limitCheck.found) {
        console.log('‚úÖ Limite de cartas implementado');
        passedTests++;
    } else {
        console.log('‚ùå Limite de cartas n√£o implementado');
    }
    
    // Teste 9: Verificar se a notifica√ß√£o de limite existe
    totalTests++;
    console.log('\nüîç Teste 9: Verificando notifica√ß√£o de limite...');
    const notificationCheck = checkFileContent('investigation-cards.html', 'showLimitNotification');
    if (notificationCheck.found) {
        console.log('‚úÖ Notifica√ß√£o de limite implementada');
        passedTests++;
    } else {
        console.log('‚ùå Notifica√ß√£o de limite n√£o implementada');
    }
    
    // Teste 10: Verificar se a fun√ß√£o updateDynamicCardsCounter existe
    totalTests++;
    console.log('\nüîç Teste 10: Verificando fun√ß√£o din√¢mica...');
    const dynamicCheck = checkFileContent('investigation-cards.html', 'updateDynamicCardsCounter');
    if (dynamicCheck.found) {
        console.log('‚úÖ Fun√ß√£o din√¢mica implementada');
        passedTests++;
    } else {
        console.log('‚ùå Fun√ß√£o din√¢mica n√£o implementada');
    }
    
    // Resultados finais
    console.log('\n' + '='.repeat(50));
    console.log('üìä RESULTADOS DOS TESTES');
    console.log('='.repeat(50));
    console.log(`‚úÖ Testes aprovados: ${passedTests}/${totalTests}`);
    console.log(`‚ùå Testes reprovados: ${totalTests - passedTests}/${totalTests}`);
    console.log(`üìà Taxa de sucesso: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
    
    if (passedTests === totalTests) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM!');
        console.log('‚úÖ Corre√ß√µes implementadas com sucesso');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
        console.log('üîß Verifique as corre√ß√µes necess√°rias');
    }
    
    console.log('\nüìã Resumo das corre√ß√µes:');
    console.log('‚Ä¢ Texto centralizado na mensagem de conclus√£o');
    console.log('‚Ä¢ Barra de progresso usando total correto por n√≠vel');
    console.log('‚Ä¢ Layout do grid corrigido');
    console.log('‚Ä¢ Limite de cartas implementado');
    console.log('‚Ä¢ Notifica√ß√£o de limite adicionada');
    console.log('‚Ä¢ Fun√ß√£o din√¢mica para contadores');
    
    return passedTests === totalTests;
}

// Executar testes
const success = runTests();

// Retornar c√≥digo de sa√≠da
process.exit(success ? 0 : 1);
