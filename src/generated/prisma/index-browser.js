
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  fullName: 'fullName',
  detectiveName: 'detectiveName',
  gameCode: 'gameCode',
  registrationDate: 'registrationDate',
  lastLogin: 'lastLogin',
  isActive: 'isActive',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gamesPlayed: 'gamesPlayed',
  gamesWon: 'gamesWon',
  gamesLost: 'gamesLost',
  totalScore: 'totalScore',
  cardsCollected: 'cardsCollected',
  bestTimeSeconds: 'bestTimeSeconds',
  favoriteMode: 'favoriteMode',
  comboStreakRecord: 'comboStreakRecord',
  evidencesFound: 'evidencesFound',
  suspectsInterrogated: 'suspectsInterrogated',
  locationsInvestigated: 'locationsInvestigated',
  totalPlaytimeMinutes: 'totalPlaytimeMinutes',
  lastGameDate: 'lastGameDate',
  achievementsUnlocked: 'achievementsUnlocked',
  rankLevel: 'rankLevel',
  rankPoints: 'rankPoints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  browser: 'browser',
  operatingSystem: 'operatingSystem',
  isActive: 'isActive',
  loginTime: 'loginTime',
  lastActivity: 'lastActivity',
  logoutTime: 'logoutTime',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  gameCode: 'gameCode',
  hostUserId: 'hostUserId',
  gameMode: 'gameMode',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  status: 'status',
  difficulty: 'difficulty',
  timeLimitMinutes: 'timeLimitMinutes',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  winnerUserId: 'winnerUserId',
  totalScore: 'totalScore',
  gameDurationMinutes: 'gameDurationMinutes',
  isActive: 'isActive',
  settingsJson: 'settingsJson',
  updatedAt: 'updatedAt'
};

exports.Prisma.GamePlayerScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  userId: 'userId',
  detectiveName: 'detectiveName',
  role: 'role',
  isReady: 'isReady',
  joinTime: 'joinTime',
  leaveTime: 'leaveTime',
  finalScore: 'finalScore',
  cardsPlayed: 'cardsPlayed',
  comboStreak: 'comboStreak',
  evidencesCollected: 'evidencesCollected',
  timeBonus: 'timeBonus',
  isActive: 'isActive',
  positionFinished: 'positionFinished',
  achievementsEarned: 'achievementsEarned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameProgressScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  userId: 'userId',
  sessionId: 'sessionId',
  saveTimestamp: 'saveTimestamp',
  gameMode: 'gameMode',
  currentLevel: 'currentLevel',
  cardsPlayed: 'cardsPlayed',
  comboStreak: 'comboStreak',
  playerCoins: 'playerCoins',
  evidencesCollected: 'evidencesCollected',
  suspectsInterrogated: 'suspectsInterrogated',
  locationsInvestigated: 'locationsInvestigated',
  timeRemainingSeconds: 'timeRemainingSeconds',
  progressDataJson: 'progressDataJson',
  isCurrentSave: 'isCurrentSave',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.GameMode = exports.$Enums.GameMode = {
  cards: 'cards',
  classic: 'classic'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  desktop: 'desktop',
  mobile: 'mobile',
  tablet: 'tablet'
};

exports.GameStatus = exports.$Enums.GameStatus = {
  waiting: 'waiting',
  active: 'active',
  finished: 'finished',
  cancelled: 'cancelled'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard'
};

exports.PlayerRole = exports.$Enums.PlayerRole = {
  host: 'host',
  player: 'player'
};

exports.Prisma.ModelName = {
  User: 'User',
  GameStats: 'GameStats',
  UserSession: 'UserSession',
  Game: 'Game',
  GamePlayer: 'GamePlayer',
  GameProgress: 'GameProgress'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
